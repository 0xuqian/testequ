import * as d3 from "d3";
import { useKLine } from "hooks/useHistoryNftInfo";
import { FC, useRef, useEffect } from "react";
import Page from "views/Page";
import * as echarts from "echarts"; // 导入 ECharts 库

// 定义数据点类型和折线图属性
interface DataPoint {
  price: number;
  time: Date;
}

interface LinePlotProps {
  data: DataPoint[];
  width?: number;
  height?: number;
  marginTop?: number;
  marginRight?: number;
  marginBottom?: number;
  marginLeft?: number;
}

const LinePlot: FC<LinePlotProps> = ({
  data,
  width = 640,
  height = 400,
}) => {
  const chartRef = useRef<HTMLDivElement | null>(null);
  
  useEffect(() => {
    if (!chartRef.current) return;

    // 创建一个 ECharts 实例
    const myChart = echarts.init(chartRef.current);

    const option = {
      xAxis: {
        type: 'category',
        data: [
        "2023-07-20T09:30:00Z",
        "2023-07-20T09:45:00Z",
        "2023-07-20T10:00:00Z",
        "2023-07-20T10:15:00Z",
        "2023-07-20T10:30:00Z",
        "2023-07-20T10:45:00Z",
        "2023-07-20T11:00:00Z",
        "2023-07-20T11:15:00Z",
        "2023-07-20T11:30:00Z",
        "2023-07-20T11:45:00Z",
        "2023-07-20T12:00:00Z",
        "2023-07-20T12:15:00Z",
        "2023-07-20T12:30:00Z",
        "2023-07-20T12:45:00Z",
        "2023-07-20T13:00:00Z",
        "2023-07-20T13:15:00Z",
        "2023-07-20T09:30:00Z",
        "2023-07-20T09:45:00Z",
        "2023-07-20T10:00:00Z",
        "2023-07-20T10:15:00Z",
        "2023-07-20T10:30:00Z",
        "2023-07-20T10:45:00Z",
        "2023-07-20T11:00:00Z",
        "2023-07-20T11:15:00Z",
        "2023-07-20T11:30:00Z",
        "2023-07-20T11:45:00Z",
        "2023-07-20T12:00:00Z",
        "2023-07-20T12:15:00Z",
        "2023-07-20T12:30:00Z",
        "2023-07-20T12:45:00Z",
        "2023-07-20T13:00:00Z",
        "2023-07-20T13:15:00Z",
        "2023-07-20T09:30:00Z",
        "2023-07-20T09:45:00Z",
        "2023-07-20T10:00:00Z",
        "2023-07-20T10:15:00Z",
        "2023-07-20T10:30:00Z",
        "2023-07-20T10:45:00Z",
        "2023-07-20T11:00:00Z",
        "2023-07-20T11:15:00Z",
        "2023-07-20T11:30:00Z",
        "2023-07-20T11:45:00Z",
        "2023-07-20T12:00:00Z",
        "2023-07-20T12:15:00Z",
        "2023-07-20T12:30:00Z",
        "2023-07-20T12:45:00Z",
        "2023-07-20T13:00:00Z",
        "2023-07-20T13:15:00Z",
        "2023-07-20T09:30:00Z",
        "2023-07-20T09:45:00Z",
        "2023-07-20T10:00:00Z",
        "2023-07-20T10:15:00Z",
        "2023-07-20T10:30:00Z",
        "2023-07-20T10:45:00Z",
        "2023-07-20T11:00:00Z",
        "2023-07-20T11:15:00Z",
        "2023-07-20T11:30:00Z",
        "2023-07-20T11:45:00Z",
        "2023-07-20T12:00:00Z",
        "2023-07-20T12:15:00Z",
        "2023-07-20T12:30:00Z",
        "2023-07-20T12:45:00Z",
        "2023-07-20T13:00:00Z",
        "2023-07-20T13:15:00Z",
        "2023-07-20T09:30:00Z",
        "2023-07-20T09:45:00Z",
        "2023-07-20T10:00:00Z",
        "2023-07-20T10:15:00Z",
        "2023-07-20T10:30:00Z",
        "2023-07-20T10:45:00Z",
        "2023-07-20T11:00:00Z",
        "2023-07-20T11:15:00Z",
        "2023-07-20T11:30:00Z",
        "2023-07-20T11:45:00Z",
        "2023-07-20T12:00:00Z",
        "2023-07-20T12:15:00Z",
        "2023-07-20T12:30:00Z",
        "2023-07-20T12:45:00Z",
        "2023-07-20T13:00:00Z",
        "2023-07-20T13:15:00Z",
        "2023-07-20T09:30:00Z",
        "2023-07-20T09:45:00Z",
        "2023-07-20T10:00:00Z",
        "2023-07-20T10:15:00Z",
        "2023-07-20T10:30:00Z",
        "2023-07-20T10:45:00Z",
        "2023-07-20T11:00:00Z",
        "2023-07-20T11:15:00Z",
        "2023-07-20T11:30:00Z",
        "2023-07-20T11:45:00Z",
        "2023-07-20T12:00:00Z",
        "2023-07-20T12:15:00Z",
        "2023-07-20T12:30:00Z",
        "2023-07-20T12:45:00Z",
        "2023-07-20T13:00:00Z",
        "2023-07-20T13:15:00Z"
    ],
      },
      yAxis: {
        type: 'value',
      },
      series: [
        {
          data: [
        0.00021,
        0.00024,
        0.00035,
        0.00045,
        0.00037,
        0.00021,
        0.00032,
        0.00047,
        0.00056,
        0.00063,
        0.00076,
        0.00083,
        0.00101,
        0.00121,
        0.00133,
        0.00136,
        0.00021,
        0.00024,
        0.00035,
        0.00045,
        0.00037,
        0.00021,
        0.00032,
        0.00047,
        0.00056,
        0.00063,
        0.00076,
        0.00083,
        0.00101,
        0.00121,
        0.00133,
        0.00136,
        0.00021,
        0.00024,
        0.00035,
        0.00045,
        0.00037,
        0.00021,
        0.00032,
        0.00047,
        0.00056,
        0.00063,
        0.00076,
        0.00083,
        0.00101,
        0.00121,
        0.00133,
        0.00136,
        0.00021,
        0.00024,
        0.00035,
        0.00045,
        0.00037,
        0.00021,
        0.00032,
        0.00047,
        0.00056,
        0.00063,
        0.00076,
        0.00083,
        0.00101,
        0.00121,
        0.00133,
        0.00136,
        0.00021,
        0.00024,
        0.00035,
        0.00045,
        0.00037,
        0.00021,
        0.00032,
        0.00047,
        0.00056,
        0.00063,
        0.00076,
        0.00083,
        0.00101,
        0.00121,
        0.00133,
        0.00136,
        0.00021,
        0.00024,
        0.00035,
        0.00045,
        0.00037,
        0.00021,
        0.00032,
        0.00047,
        0.00056,
        0.00063,
        0.00076,
        0.00083,
        0.00101,
        0.00121,
        0.00133,
        0.00136
    ],
          type: 'line',
        },
      ],
    };

    // 设置图表选项并绘制
    myChart.setOption(option);

    // 组件卸载时清理图表
    // myChart.clear(); 
  }, [data]);

  return <div ref={chartRef} style={{ width, height }} />;
};

const Tocao: React.FC = () => {
  const data1 = useKLine();
  const parseTime = d3.utcParse("%Y-%m-%dT%H:%M:%SZ");
  let price = [];
  let time = [];

  if (data1) {
    price = data1.data.y_axis;
    time = data1.data.x_axis.map(parseTime);
    // 先解析时间戳，再排序
    const sortedData = time.map((timeValue, index) => ({
      price: price[index],
      time: timeValue,
    }));
    // 将排序后的数据赋值给 dataPoints
    const dataPoints: DataPoint[] = sortedData;
    console.log(dataPoints, time[1]);

    // 如果 dataPoints 数组不为空，渲染折线图
    return (
      <Page>
        <div>
          <h1>My Line Plot</h1>
          <LinePlot data={dataPoints} /> 
        </div>
      </Page>
    );
  } 
  return (
    <Page>
      <div>
        <h1>Loading...</h1>
        <p>No data available.</p>
      </div>
    </Page>
  );
};

export default Tocao;
